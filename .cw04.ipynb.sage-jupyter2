{"exec_count":1,"start":1519628383013,"input":"import cw04\nimport pandas as pd","state":"done","pos":0,"cell_type":"code","type":"cell","end":1519628383681,"id":"c245f1","kernel":"anaconda3"}
{"exec_count":10,"start":1519628386966,"input":"gauss = pd.DataFrame({\"x\":x,\"g(x)\":g})","state":"done","pos":15,"cell_type":"code","type":"cell","end":1519628386985,"id":"941fda","kernel":"anaconda3"}
{"exec_count":15,"start":1519628389437,"input":"sinc = pd.DataFrame({\"x\":x,\"s(x)\":g})","state":"done","pos":16.9375,"type":"cell","end":1519628389462,"id":"0b1493","kernel":"anaconda3"}
{"exec_count":6,"start":1519628384976,"input":"gauss = pd.DataFrame({\"x\":x,\"g(x)\":g})","state":"done","pos":9,"cell_type":"code","type":"cell","end":1519628385192,"id":"e62843","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>g(x)</th>\n      <th>x</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7.694599e-23</td>\n      <td>-10.00000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>7.696138e-23</td>\n      <td>-9.99998</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.697677e-23</td>\n      <td>-9.99996</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7.699217e-23</td>\n      <td>-9.99994</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7.700757e-23</td>\n      <td>-9.99992</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>7.702297e-23</td>\n      <td>-9.99990</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7.703838e-23</td>\n      <td>-9.99988</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7.705379e-23</td>\n      <td>-9.99986</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>7.706920e-23</td>\n      <td>-9.99984</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>7.708461e-23</td>\n      <td>-9.99982</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>7.710003e-23</td>\n      <td>-9.99980</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>7.711545e-23</td>\n      <td>-9.99978</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>7.713088e-23</td>\n      <td>-9.99976</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>7.714630e-23</td>\n      <td>-9.99974</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>7.716173e-23</td>\n      <td>-9.99972</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>7.717717e-23</td>\n      <td>-9.99970</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>7.719260e-23</td>\n      <td>-9.99968</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>7.720804e-23</td>\n      <td>-9.99966</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>7.722349e-23</td>\n      <td>-9.99964</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>7.723893e-23</td>\n      <td>-9.99962</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>7.725438e-23</td>\n      <td>-9.99960</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>7.726983e-23</td>\n      <td>-9.99958</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>7.728529e-23</td>\n      <td>-9.99956</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>7.730074e-23</td>\n      <td>-9.99954</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>7.731621e-23</td>\n      <td>-9.99952</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>7.733167e-23</td>\n      <td>-9.99950</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>7.734714e-23</td>\n      <td>-9.99948</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>7.736261e-23</td>\n      <td>-9.99946</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>7.737808e-23</td>\n      <td>-9.99944</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>7.739356e-23</td>\n      <td>-9.99942</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>999971</th>\n      <td>7.739356e-23</td>\n      <td>9.99942</td>\n    </tr>\n    <tr>\n      <th>999972</th>\n      <td>7.737808e-23</td>\n      <td>9.99944</td>\n    </tr>\n    <tr>\n      <th>999973</th>\n      <td>7.736261e-23</td>\n      <td>9.99946</td>\n    </tr>\n    <tr>\n      <th>999974</th>\n      <td>7.734714e-23</td>\n      <td>9.99948</td>\n    </tr>\n    <tr>\n      <th>999975</th>\n      <td>7.733167e-23</td>\n      <td>9.99950</td>\n    </tr>\n    <tr>\n      <th>999976</th>\n      <td>7.731621e-23</td>\n      <td>9.99952</td>\n    </tr>\n    <tr>\n      <th>999977</th>\n      <td>7.730074e-23</td>\n      <td>9.99954</td>\n    </tr>\n    <tr>\n      <th>999978</th>\n      <td>7.728529e-23</td>\n      <td>9.99956</td>\n    </tr>\n    <tr>\n      <th>999979</th>\n      <td>7.726983e-23</td>\n      <td>9.99958</td>\n    </tr>\n    <tr>\n      <th>999980</th>\n      <td>7.725438e-23</td>\n      <td>9.99960</td>\n    </tr>\n    <tr>\n      <th>999981</th>\n      <td>7.723893e-23</td>\n      <td>9.99962</td>\n    </tr>\n    <tr>\n      <th>999982</th>\n      <td>7.722349e-23</td>\n      <td>9.99964</td>\n    </tr>\n    <tr>\n      <th>999983</th>\n      <td>7.720804e-23</td>\n      <td>9.99966</td>\n    </tr>\n    <tr>\n      <th>999984</th>\n      <td>7.719260e-23</td>\n      <td>9.99968</td>\n    </tr>\n    <tr>\n      <th>999985</th>\n      <td>7.717717e-23</td>\n      <td>9.99970</td>\n    </tr>\n    <tr>\n      <th>999986</th>\n      <td>7.716173e-23</td>\n      <td>9.99972</td>\n    </tr>\n    <tr>\n      <th>999987</th>\n      <td>7.714630e-23</td>\n      <td>9.99974</td>\n    </tr>\n    <tr>\n      <th>999988</th>\n      <td>7.713088e-23</td>\n      <td>9.99976</td>\n    </tr>\n    <tr>\n      <th>999989</th>\n      <td>7.711545e-23</td>\n      <td>9.99978</td>\n    </tr>\n    <tr>\n      <th>999990</th>\n      <td>7.710003e-23</td>\n      <td>9.99980</td>\n    </tr>\n    <tr>\n      <th>999991</th>\n      <td>7.708461e-23</td>\n      <td>9.99982</td>\n    </tr>\n    <tr>\n      <th>999992</th>\n      <td>7.706920e-23</td>\n      <td>9.99984</td>\n    </tr>\n    <tr>\n      <th>999993</th>\n      <td>7.705379e-23</td>\n      <td>9.99986</td>\n    </tr>\n    <tr>\n      <th>999994</th>\n      <td>7.703838e-23</td>\n      <td>9.99988</td>\n    </tr>\n    <tr>\n      <th>999995</th>\n      <td>7.702297e-23</td>\n      <td>9.99990</td>\n    </tr>\n    <tr>\n      <th>999996</th>\n      <td>7.700757e-23</td>\n      <td>9.99992</td>\n    </tr>\n    <tr>\n      <th>999997</th>\n      <td>7.699217e-23</td>\n      <td>9.99994</td>\n    </tr>\n    <tr>\n      <th>999998</th>\n      <td>7.697677e-23</td>\n      <td>9.99996</td>\n    </tr>\n    <tr>\n      <th>999999</th>\n      <td>7.696138e-23</td>\n      <td>9.99998</td>\n    </tr>\n    <tr>\n      <th>1000000</th>\n      <td>7.694599e-23</td>\n      <td>10.00000</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000001 rows Ã— 2 columns</p>\n</div>"},"exec_count":7}},"exec_count":7,"start":1519628385201,"input":"gauss","state":"done","pos":10,"cell_type":"code","type":"cell","end":1519628385262,"id":"77baf7","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fc8b3304c88>"},"exec_count":11},"1":{"metadata":{"image/png":{"width":380,"height":263}},"data":{"image/png":"11e6187a4f1db8bb2f4b226f3756320db3abd41b"}}},"exec_count":11,"start":1519628386990,"input":"gauss.plot(x=\"x\",y=\"g(x)\")","state":"done","pos":16,"cell_type":"code","type":"cell","end":1519628388466,"id":"3bdf9b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fc8b3377ba8>"},"exec_count":8},"1":{"metadata":{"image/png":{"width":380,"height":263}},"data":{"image/png":"11e6187a4f1db8bb2f4b226f3756320db3abd41b"}}},"exec_count":8,"start":1519628385273,"input":"gauss.plot(x=\"x\",y=\"g(x)\")","state":"done","pos":11,"cell_type":"code","type":"cell","end":1519628386854,"id":"8038f4","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fc8b5235390>"},"exec_count":16},"1":{"metadata":{"image/png":{"width":380,"height":263}},"data":{"image/png":"3ebcd1545fab6d565b6e9d4668087b7b0e36fa0f"}}},"exec_count":16,"start":1519628389480,"input":"sinc.plot(x=\"x\",y=\"s(x)\")","state":"done","pos":16.96875,"type":"cell","end":1519628391016,"id":"e1a8d8","kernel":"anaconda3"}
{"output":{"0":{"ename":"ZeroDivisionError","evalue":"float division by zero","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n","\u001b[0;32m~/phys220/cw-04-phys220/cw04.py\u001b[0m in \u001b[0;36mgen_sinc_list\u001b[0;34m(a, b, n)\u001b[0m\n\u001b[1;32m     96\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 98\u001b[0;31m     \u001b[0msc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0msinc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxk\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mxk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     99\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m~/phys220/cw-04-phys220/cw04.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     96\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 98\u001b[0;31m     \u001b[0msc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0msinc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxk\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mxk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     99\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m~/phys220/cw-04-phys220/cw04.py\u001b[0m in \u001b[0;36msinc\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0msinc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     \u001b[0msc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0msinc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxk\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mxk\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mZeroDivisionError\u001b[0m: float division by zero"]}},"exec_count":14,"start":1519628388533,"input":"%time x, s = cw04.gen_sinc_list(-10,10,1000001)","state":"done","pos":16.875,"type":"cell","end":1519628389428,"id":"2c0e2b","kernel":"anaconda3"}
{"output":{"0":{"start":0,"data":{"text/plain":"\u001b[0;31mSignature:\u001b[0m \u001b[0mcw04\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen_gaussian_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;31mDocstring:\u001b[0m\ngen_gaussian_array(a, b, n=1000)\nGenerate a discrete approximation of a Gaussian function, including its\ndomain and range, stored as a pair of numpy arrays.\n\nArgs:\n    a (float) : Lower bound of domain\n    b (float) : Upper bound of domain\n    n (int, optional) : Number of points in domain, defaults to 1000.\n\nReturns:\n    (x, g) : Pair of numpy arrays of float64\n        x  : [a, ..., b] Array of n equally spaced float64 between a and b\n        g  : [g(a), ..., g(b)] Array of Gaussian values matched to x\n\u001b[0;31mFile:\u001b[0m      ~/phys220/cw-04-phys220/cw04.py\n\u001b[0;31mType:\u001b[0m      function\n"}}},"exec_count":4,"start":1519628383774,"input":"?cw04.gen_gaussian_array","state":"done","pos":5,"cell_type":"code","type":"cell","end":1519628383842,"id":"984603","kernel":"anaconda3"}
{"output":{"0":{"start":0,"data":{"text/plain":"\u001b[0;31mSignature:\u001b[0m \u001b[0mcw04\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen_sinc_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;31mDocstring:\u001b[0m\ngen_sinc_array(a, b, n=1000)\nGenerate a discrete approximation of a sinc function, including its\ndomain and range, stored as a pair of numpy arrays.\n\nArgs:\n    a (float) : Lower bound of domain\n    b (float) : Upper bound of domain\n    n (int, optional) : Number of points in domain, defaults to 1000.\n\nReturns:\n    (x, s) : Pair of numpy arrays of float64\n        x  : [a, ..., b] Array of n equally spaced float64 between a and b\n        s  : [s(a), ..., s(b)] Array of sinc values matched to x\n\u001b[0;31mFile:\u001b[0m      ~/phys220/cw-04-phys220/cw04.py\n\u001b[0;31mType:\u001b[0m      function\n"}}},"exec_count":13,"start":1519628388503,"input":"?cw04.gen_sinc_array","state":"done","pos":16.75,"type":"cell","end":1519628388530,"id":"387f09","kernel":"anaconda3"}
{"output":{"0":{"text":"CPU times: user 53.8 ms, sys: 22.9 ms, total: 76.7 ms\nWall time: 86.5 ms\n","name":"stdout"}},"exec_count":9,"start":1519628386867,"input":"%time x, g = cw04.gen_gaussian_array(-10, 10, 1000001)","state":"done","pos":14,"cell_type":"code","type":"cell","end":1519628386954,"id":"37b63f","kernel":"anaconda3"}
{"output":{"0":{"text":"CPU times: user 956 ms, sys: 6.11 ms, total: 962 ms\nWall time: 1.09 s\n","name":"stdout"}},"exec_count":5,"start":1519628383847,"input":"%time x, g = cw04.gen_gaussian_list(-10,10,1000001)","state":"done","pos":8,"cell_type":"code","type":"cell","end":1519628384961,"id":"bb5b92","kernel":"anaconda3"}
{"output":{"0":{"text":"Help on function gen_gaussian_list in module cw04:\n\ngen_gaussian_list(a, b, n=1000)\n    gen_gaussian_list(a, b, n=1000)\n    Generate a discrete approximation of a Gaussian function, including its\n    domain and range, stored as a pair of vanilla python lists.\n    \n    Args:\n        a (float) : Lower bound of domain\n        b (float) : Upper bound of domain\n        n (int, optional) : Number of points in domain, defaults to 1000.\n    \n    Returns:\n        (x, g) : Pair of lists of floats\n            x  : [a, ..., b] List of n equally spaced floats between a and b\n            g  : [g(a), ..., g(b)] List of Gaussian values matched to x\n\n","name":"stdout"}},"exec_count":3,"start":1519628383756,"input":"help(cw04.gen_gaussian_list)","state":"done","pos":4,"cell_type":"code","type":"cell","end":1519628383771,"id":"d4adf9","kernel":"anaconda3"}
{"output":{"0":{"text":"Help on function gen_sinc_list in module cw04:\n\ngen_sinc_list(a, b, n=1000)\n    gen_sinc_list(a, b, n=1000)\n    Generate a discrete approximation of a sinc function, including its\n    domain and range, stored as a pair of vanilla python lists.\n    \n    Args:\n        a (float) : Lower bound of domain\n        b (float) : Upper bound of domain\n        n (int, optional) : Number of points in domain, defaults to 1000.\n    \n    Returns:\n        (x, s) : Pair of lists of floats\n            x  : [a, ..., b] List of n equally spaced floats between a and b\n            s  : [s(a), ..., s(b)] List of sinc values matched to x\n\n","name":"stdout"}},"exec_count":12,"start":1519628388488,"input":"help(cw04.gen_sinc_list)","state":"done","pos":16.5,"type":"cell","end":1519628388498,"id":"16e128","kernel":"anaconda3"}
{"output":{"0":{"text":"Help on module cw04:\n\nNAME\n    cw04\n\nDESCRIPTION\n    Classwork 04\n    This classwork introduces numpy arrays and compares their performance to\n    python lists.\n\nFUNCTIONS\n    gen_gaussian_array(a, b, n=1000)\n        gen_gaussian_array(a, b, n=1000)\n        Generate a discrete approximation of a Gaussian function, including its\n        domain and range, stored as a pair of numpy arrays.\n        \n        Args:\n            a (float) : Lower bound of domain\n            b (float) : Upper bound of domain\n            n (int, optional) : Number of points in domain, defaults to 1000.\n        \n        Returns:\n            (x, g) : Pair of numpy arrays of float64\n                x  : [a, ..., b] Array of n equally spaced float64 between a and b\n                g  : [g(a), ..., g(b)] Array of Gaussian values matched to x\n    \n    gen_gaussian_list(a, b, n=1000)\n        gen_gaussian_list(a, b, n=1000)\n        Generate a discrete approximation of a Gaussian function, including its\n        domain and range, stored as a pair of vanilla python lists.\n        \n        Args:\n            a (float) : Lower bound of domain\n            b (float) : Upper bound of domain\n            n (int, optional) : Number of points in domain, defaults to 1000.\n        \n        Returns:\n            (x, g) : Pair of lists of floats\n                x  : [a, ..., b] List of n equally spaced floats between a and b\n                g  : [g(a), ..., g(b)] List of Gaussian values matched to x\n    \n    gen_sinc_array(a, b, n=1000)\n        gen_sinc_array(a, b, n=1000)\n        Generate a discrete approximation of a sinc function, including its\n        domain and range, stored as a pair of numpy arrays.\n        \n        Args:\n            a (float) : Lower bound of domain\n            b (float) : Upper bound of domain\n            n (int, optional) : Number of points in domain, defaults to 1000.\n        \n        Returns:\n            (x, s) : Pair of numpy arrays of float64\n                x  : [a, ..., b] Array of n equally spaced float64 between a and b\n                s  : [s(a), ..., s(b)] Array of sinc values matched to x\n    \n    gen_sinc_list(a, b, n=1000)\n        gen_sinc_list(a, b, n=1000)\n        Generate a discrete approximation of a sinc function, including its\n        domain and range, stored as a pair of vanilla python lists.\n        \n        Args:\n            a (float) : Lower bound of domain\n            b (float) : Upper bound of domain\n            n (int, optional) : Number of points in domain, defaults to 1000.\n        \n        Returns:\n            (x, s) : Pair of lists of floats\n                x  : [a, ..., b] List of n equally spaced floats between a and b\n                s  : [s(a), ..., s(b)] List of sinc values matched to x\n    \n    gen_sinf_array(a, b, n=1000)\n        gen_sinf_array(a, b, n=1000)\n        Generate a discrete approximation of a sinf function, including its\n        domain and range, stored as numpy arrays.\n        \n        Args:\n            a (float) : Lower bound of domain\n            b (float) : Upper bound of domain\n            n (int, optional) : Number of points in domain, defaults to 1000.\n        \n        Returns:\n            (x, s) : Pair of numpy arrays of float64\n                x  : [a, ..., b] Array of n equally spaced float64 between a and b\n                s  : [s(a), ..., s(b)] Array of sinf values matched to x\n    \n    gen_sinf_list(a, b, n=1000)\n        gen_sinf_list(a, b, n=1000)\n        Generate a discrete approximation of a sinf function, including its\n        domain and range, stored as a pair of vanilla python lists.\n        \n        Args:\n            a (float) : Lower bound of domain\n            b (float) : Upper bound of domain\n            n (int, optional) : Number of points in domain, defaults to 1000.\n        \n        Returns:\n            (x, s) : Pair of lists of floats\n                x  : [a, ..., b] List of n equally spaced floats between a and b\n                s  : [s(a), ..., s(b)] List of sinf values matched to x\n    \n    main(a, b, n=1000)\n        main(a, b, n=1000)\n        Main function for command line operation. Prints result of Gaussian to screen.\n        \n        Args:\n            a (float) : Lower bound of domain\n            b (float) : Upper bound of domain\n            n (int, optional) : Number of points in domain, defaults to 1000.\n        \n        Returns:\n            None\n        \n        Effects:\n            Prints Gaussian to screen.\n\nFILE\n    /home/user/phys220/cw-04-phys220/cw04.py\n\n\n","name":"stdout"}},"exec_count":2,"start":1519628383732,"input":"help(cw04)","state":"done","pos":3,"cell_type":"code","type":"cell","end":1519628383751,"id":"2af4e4","kernel":"anaconda3"}
{"type":"cell","id":"1713fc","pos":16.9921875,"input":""}
{"type":"cell","id":"3dcdba","pos":12,"input":"### Numpy Arrays","cell_type":"markdown"}
{"type":"cell","id":"4cc862","pos":1,"input":"# Classwork 04\n\nDaniel, Devon, Myranda\nFebruary 27, 2018\n\n## Description\n\nThe following code benchmarks and plots functions approximated both as python lists and as numpy arrays.","cell_type":"markdown"}
{"type":"cell","id":"52760f","pos":17,"input":"## Conclusions\n\nWe conclude from the above tests that...","cell_type":"markdown"}
{"type":"cell","id":"539238","pos":6,"input":"### Python Lists\n\nBenchmark and plot the reference list implementation.","cell_type":"markdown"}
{"type":"cell","id":"5d20ee","pos":7,"input":"#### Gaussian Function","cell_type":"markdown"}
{"type":"cell","id":"ac8580","pos":13,"input":"#### Gaussian Function","cell_type":"markdown"}
{"type":"cell","id":"b1547b","pos":16.984375,"input":""}
{"type":"cell","id":"dfb235","pos":2,"input":"### Module Documentation\n\nFor illustration, we show how the python help system naturally uses the docstrings from the code.","cell_type":"markdown"}
{"type":"file","last_load":1519628204183}
{"type":"settings","kernel":"anaconda3","trust":true,"backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.4"}},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":457224192}}